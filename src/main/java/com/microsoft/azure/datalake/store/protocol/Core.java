/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * See License.txt in the project root for license information.
 */

package com.microsoft.azure.datalake.store.protocol;


import com.microsoft.azure.datalake.store.ADLException;
import com.microsoft.azure.datalake.store.AzureDataLakeStorageClient;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.azure.datalake.store.DirectoryEntry;
import com.microsoft.azure.datalake.store.DirectoryEntryType;
import com.microsoft.azure.datalake.store.acl.AclEntry;
import com.microsoft.azure.datalake.store.acl.AclStatus;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Pattern;

/**
 * protocol.Core class implements the calls for the RESP API. There is one method in Core for every
 * REST API supported by the server.
 * <P>
 * The methods in this class tend to be lower-level, exposing all the details of the underlying operation.
 * To call the methods, instantiate a {@link RequestOptions} object first. Assign any of the
 * member values as needed (e.g., the RetryPolicy). Then create a new {@link OperationResponse} object. The
 * {@link OperationResponse} is used for passing the call results and stats back from the call.
 * </P><P>
 * Failures originating in Core methods are communicated back through the {@link OperationResponse} parameter,
 * not through exceptions. There is a convenience method ({@link #getExceptionFromResp(OperationResponse, String) getExceptionFromResp})
 * to generate an exception from the response, if the response indicates a failure.
 * </P><P>
 * <B>Thread Safety: </B> all static methods in this class are thread-safe
 *
 * </P>
 */
public class Core {

    // no constructor - class has static methods only
    private Core() {}



    /**
     * create a file and write to it.
     *
     *
     * @param path the full path of the file to create
     * @param overwrite whether to overwrite the file if it already exists
     * @param contents byte array containing the contents to be written to the file. Can be {@code null}
     * @param offsetWithinContentsArray offset within the byte array passed in {@code contents}. Bytes starting
     *                                  at this offset will be written to server
     * @param length number of bytes from {@code contents} to be written
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void create(String path,
                              boolean overwrite,
                              byte[] contents,
                              int offsetWithinContentsArray,
                              int length,
                              AzureDataLakeStorageClient client,
                              RequestOptions opts,
                              OperationResponse resp) {
        QueryParams qp = new QueryParams();
        qp.add("overwrite", (overwrite? "true" : "false"));
        qp.add("write", "true");  // This is to suppress the 307-redirect from server (standard WebHdfs behavior)

        HttpTransport.makeCall(client, Operation.CREATE, path, qp, contents, offsetWithinContentsArray, length, opts, resp);
    }

    /**
     * append bytes to an existing file created with
     * {@link #create(String, boolean, byte[], int, int, AzureDataLakeStorageClient, RequestOptions, OperationResponse) create}.
     *
     *
     * @param path the full path of the file to append to. The file must already exist.
     * @param contents byte array containing the contents to be written to the file. Can be {@code null}
     * @param offsetWithinContentsArray offset within the byte array passed in {@code contents}. Bytes starting
     *                                  at this offset will be written to server
     * @param length number of bytes from {@code contents} to be written
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void append(String path,
                              byte[] contents,
                              int offsetWithinContentsArray,
                              int length,
                              AzureDataLakeStorageClient client,
                              RequestOptions opts,
                              OperationResponse resp) {
        QueryParams qp = new QueryParams();
        qp.add("append", "true");

        HttpTransport.makeCall(client, Operation.APPEND, path, qp, contents, offsetWithinContentsArray, length, opts, resp);
    }

    /**
     * append bytes to a file. The offset is determined by the server. This enables multiple writers to
     * append concurrently to the same file. A file created with {@code concurrentAppend} can only be appended
     * with {@code concurrentAppend}.
     *
     * @param path the full path of the file to append to.
     * @param contents byte array containing the contents to be written to the file. Can be {@code null}
     * @param offsetWithinContentsArray offset within the byte array passed in {@code contents}. Bytes starting
     *                                  at this offset will be written to server
     * @param length number of bytes from {@code contents} to be written
     * @param autoCreate boolean specifying whether to create the file if it doesn't already exist
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void concurrentAppend(String path,
                                        byte[] contents,
                                        int offsetWithinContentsArray,
                                        int length,
                                        boolean autoCreate,
                                        AzureDataLakeStorageClient client,
                                        RequestOptions opts,
                                        OperationResponse resp) {
        if (contents == null || contents.length == 0 || length == 0) return;

        QueryParams qp = new QueryParams();
        if (autoCreate) qp.add("appendMode", "autocreate");

        HttpTransport.makeCall(client, Operation.CONCURRENTAPPEND, path, qp, contents, offsetWithinContentsArray, length, opts, resp);
        try {
            resp.responseStream.close();
        } catch (IOException ex) {
            // Dont care about response from server.
        }
    }

    /**
     * read from a file. This is the stateless read method, that reads bytes from an offset in a file.
     *
     *
     * @param path the full path of the file to read. The file must already exist.
     * @param offset the offset within the ADL file to read from
     * @param length the number of bytes to read from file
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     * @return returns an {@link com.microsoft.azure.datalake.store.ADLFileInputStream}
     */
    public static InputStream open(String path,
                                   long offset,
                                   long length,
                                   AzureDataLakeStorageClient client,
                                   RequestOptions opts,
                                   OperationResponse resp) {
        QueryParams qp = new QueryParams();
        qp.add("read", "true");
        if (offset < 0) {
            resp.successful = false;
            resp.message = "attempt to read from negative offset: " + offset;
            return null;
        }

        if (length < 0) {
            resp.successful = false;
            resp.message = "attempt to read negative length: " + length;
            return null;
        }

        if (offset > 0) qp.add("offset", Long.toString(offset));
        if (length > 0) qp.add("length", Long.toString(length));

        HttpTransport.makeCall(client, Operation.OPEN, path, qp, null, 0, 0, opts, resp);

        if (resp.successful) {
            return resp.responseStream;
        } else {
            return null;
        }
    }

    /**
     * delete a file or directory from Azure Data Lake.
     *
     * @param path the full path of the file to delete. The file must already exist.
     * @param recursive if deleting a directory, then whether to delete all files an directories
     *                  in the directory hierarchy underneath
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     * @return returns {@code true} if the delete was successful. Also check {@code resp.successful}.
     */
    public static boolean delete(String path,
                                 boolean recursive,
                                 AzureDataLakeStorageClient client,
                                 RequestOptions opts,
                                 OperationResponse resp) {
        QueryParams qp = new QueryParams();
        qp.add("recursive", (recursive? "true" : "false"));

        HttpTransport.makeCall(client, Operation.DELETE, path, qp, null, 0, 0, opts, resp);
        if (!resp.successful) return false;

        boolean returnValue = true;
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(resp.responseStream);

            returnValue = rootNode.path("boolean").asBoolean();

        } catch (IOException ex) {
            resp.successful = false;
            resp.message = "Unexpected error happened reading response stream or parsing JSon from delete()";
        }

        return returnValue;
    }

    /**
     * rename a file.
     *
     * @param path the full path of the existing file to rename. (the old name)
     * @param overwrite overwrite the destination if it already exists and is a file or an
     *                  empty directory
     * @param destination the new name of the file
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     *
     * @return returns {@code true} if the rename was successful. Also check {@code resp.successful}.
     */
    public static boolean rename(String path,
                                 String destination,
                                 boolean overwrite,
                                 AzureDataLakeStorageClient client,
                                 RequestOptions opts,
                                 OperationResponse resp) {
        QueryParams qp = new QueryParams();
        qp.add("destination", destination);

        if (overwrite) qp.add("overwrite", "true");

        HttpTransport.makeCall(client, Operation.RENAME, path, qp, null, 0, 0, opts, resp);
        if (!resp.successful) return false;

        boolean returnValue = true;
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(resp.responseStream);
            returnValue = rootNode.path("boolean").asBoolean();
        } catch (IOException ex) {
            resp.successful = false;
            resp.message = "Unexpected error happened reading response stream or parsing JSon from rename()";
        }
        return returnValue;
    }

    /**
     * creates a directory, and all it's parent directories if they dont exist.
     *
     * @param path the full path of the directory to create. Any missing parents in the path will also be created.
     * @param octalPermission permissions for the directory, as octal digits (For Example, {@code "755"}). Can be null.
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     *
     * @return returns {@code true} if the create was successful. Also check {@code resp.successful}.
     */
    public static boolean mkdirs(String path,
                                 String octalPermission,
                                 AzureDataLakeStorageClient client,
                                 RequestOptions opts,
                                 OperationResponse resp) {

        QueryParams qp = new QueryParams();
        if (octalPermission != null && !octalPermission.equals("")) {
            if (isValidOctal(octalPermission)) {
                qp.add("permission", octalPermission);
            } else {
                resp.successful = false;
                resp.message = "Invalid directory permissions specified: " + octalPermission;
                return false;
            }
        }

        HttpTransport.makeCall(client, Operation.MKDIRS, path, qp, null, 0, 0, opts, resp);
        if (!resp.successful) return false;

        boolean returnValue = true;
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(resp.responseStream);

            returnValue = rootNode.path("boolean").asBoolean();

        } catch (IOException ex) {
            resp.successful = false;
            resp.message = "Unexpected error happened reading response stream or parsing JSon from mkdirs()";
        }
        return returnValue;
    }




    /**
     * Concatenate the specified list of files into the target filename. The target should not exist.
     * the source files will be deleted if the concatenate succeeds.
     *
     * @param path that full path of the target file to create
     * @param sources {@link List} of strings containing full pathnames of the files to concatenate.
     *                Cannot be null or empty.
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void concat(String path,
                              List<String> sources,
                              AzureDataLakeStorageClient client,
                              RequestOptions opts,
                              OperationResponse resp) {
        if (sources == null || sources.size() == 0 ) {
            resp.successful = false;
            resp.message = "No source files specified to concatenate";
            return;
        }
        byte[] body = null;
        StringBuilder sb = new StringBuilder("sources=");
        boolean firstelem = true;
        for (String item : sources) {
            if (item.equals(path)) {
                resp.successful = false;
                resp.message = "One of the source files to concatenate is the destination file";
                return;
            }
            if (!firstelem) sb.append(',');
                       else firstelem = false;
            sb.append(item);
        }
        try {
            body = sb.toString().getBytes("UTF-8");
        } catch (UnsupportedEncodingException ex) {
            //This should't happen.
            assert false : "UTF-8 encoding is not supported";
        }

        HttpTransport.makeCall(client, Operation.MSCONCAT, path, null, body, 0, body.length, opts, resp);
    }


    /**
     * Gets the directory metadata associated with a file or directory.
     *
     * @param path the file or directory to get metadata for
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     *
     * @return {@link DirectoryEntry} containing the metadata for the file
     */
    public static DirectoryEntry getFileStatus(String path,
                                               AzureDataLakeStorageClient client,
                                               RequestOptions opts,
                                               OperationResponse resp) {
        HttpTransport.makeCall(client, Operation.GETFILESTATUS, path, null, null, 0, 0, opts, resp);

        if (resp.successful) {
            try {
                ObjectMapper mapper = new ObjectMapper();
                JsonNode rootNode = mapper.readTree(resp.responseStream);

                JsonNode fsNode = rootNode.path("FileStatus");

                String name = fsNode.path("pathSuffix").asText();
                String fullName;
                if (!name.equals("")) {
                    if (path.endsWith("/")) {
                        fullName = path + name;
                    } else {
                        fullName = path + "/" + name;
                    }
                } else {
                    fullName = path;
                    name = path.substring(path.lastIndexOf("/")+1);
                }

                long length = fsNode.path("length").asLong(0);
                String user = fsNode.path("owner").asText();
                String group = fsNode.path("group").asText();
                Date lastAccessTime = new Date(fsNode.path("accessTime").asLong());
                Date lastModifiedTime = new Date(fsNode.path("modificationTime").asLong());
                DirectoryEntryType type = fsNode.path("type").asText().equals("FILE") ?
                                                              DirectoryEntryType.FILE :
                                                              DirectoryEntryType.DIRECTORY;
                String permission = fsNode.path("permission").asText();

                return new DirectoryEntry(name,
                                          fullName,
                                          length,
                                          group,
                                          user,
                                          lastAccessTime,
                                          lastModifiedTime,
                                          type,
                                          permission);
            } catch (IOException ex) {
                resp.successful = false;
                resp.message = "Unexpected error happened reading response stream or parsing JSon from getFileStatus()";
            }
        }
        return null;
    }

    /**
     * enumerates the contents of a direcotry, returning a {@link List} of {@link DirectoryEntry} objects,
     * one per file or directory in the specified directory.
     * <P>
     * To avoid overwhelming the client or the server, the call may return a partial list, in which case
     * the caller should make the call again with the last entry from the returned list specified as the
     * {@code listAfter} parameter of the next call.
     * </P>
     * @param path the directory to enumerate
     * @param listAfter the filename after which to begin enumeration
     * @param listBefore the filename before which to end the enumeration
     * @param listSize the maximum number of entries in the returned list
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     *
     * @return {@link List}&lt;{@link DirectoryEntry}&gt; containing the contents of the directory
     */
    public static List<DirectoryEntry> listStatus(String path,
                                                  String listAfter,
                                                  String listBefore,
                                                  int listSize,
                                                  AzureDataLakeStorageClient client,
                                                  RequestOptions opts,
                                                  OperationResponse resp) {
        QueryParams qp = new QueryParams();

        if (listAfter!=null && !listAfter.equals("")) {
            qp.add("listAfter", listAfter);
        }
        if (listBefore!=null && !listBefore.equals("")) {
            qp.add("listBefore", listBefore);
        }
        if (listSize > 0) {
            qp.add("listSize", Integer.toString(listSize));
        }

        HttpTransport.makeCall(client, Operation.LISTSTATUS, path, qp, null, 0, 0, opts, resp);

        if (resp.successful) {
            ArrayList<DirectoryEntry> list = new ArrayList<DirectoryEntry>();
            try {
                ObjectMapper mapper = new ObjectMapper();
                JsonNode rootNode = mapper.readTree(resp.responseStream);

                JsonNode array = rootNode.path("FileStatuses").path("FileStatus");
                for (JsonNode fsNode : array) {
                    String name = fsNode.path("pathSuffix").asText();
                    String fullName;
                    if (!name.equals("")) {
                        if (path.endsWith("/")) {
                            fullName = path + name;
                        } else {
                            fullName = path + "/" + name;
                        }
                    } else {
                        fullName = path;
                        name = path.substring(path.lastIndexOf("/")+1);
                    }

                    long length = fsNode.path("length").asLong(0);
                    String user = fsNode.path("owner").asText();
                    String group = fsNode.path("group").asText();
                    Date lastAccessTime = new Date(fsNode.path("accessTime").asLong());
                    Date lastModifiedTime = new Date(fsNode.path("modificationTime").asLong());
                    DirectoryEntryType type = fsNode.path("type").asText().equals("FILE") ?
                            DirectoryEntryType.FILE :
                            DirectoryEntryType.DIRECTORY;
                    String permission = fsNode.path("permission").asText();

                    DirectoryEntry entry = new DirectoryEntry(name,
                            fullName,
                            length,
                            group,
                            user,
                            lastAccessTime,
                            lastModifiedTime,
                            type,
                            permission);
                    list.add(entry);
                }
                return list;
            } catch (IOException ex) {
                resp.successful = false;
                resp.message = "Unexpected error happened reading response stream or parsing JSon from listFiles()";
            }
        }
        return null;
    }

    /**
     * sets one or both of the times (Modified and Access time) of the file or directory
     *
     * @param path the full path of the file or directory to {@code touch}
     * @param atime Access time as a long
     * @param mtime Modified time as a long
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void setTimes(String path,
                                long atime,
                                long mtime,
                                AzureDataLakeStorageClient client,
                                RequestOptions opts,
                                OperationResponse resp) {
        if (atime < -1) {
            resp.message = "Invalid Access Time specified";
            resp.successful = false;
            return;
        }

        if (mtime < -1) {
            resp.message = "Invalid Modification Time specified";
            resp.successful = false;
            return;
        }

        if (atime == -1 && mtime == -1) {
            resp.message = "Access time and Modification time cannot both be unspecified";
        }

        QueryParams qp = new QueryParams();
        if (mtime != -1 ) qp.add("modificationtime", Long.toString(mtime));
        if (atime != -1 ) qp.add("accesstime",       Long.toString(atime));

        HttpTransport.makeCall(client, Operation.SETTIMES, path, qp, null, 0, 0, opts, resp);
    }

    /**
     * sets the owning user and group of the file. If the user or group are {@code null}, then they are not changed.
     * It is illegal to pass both user and owner as {@code null}.
     *
     * @param path the full path of the file
     * @param user the ID of the user, or {@code null}
     * @param group the ID of the group, or {@code null}
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void setOwner(String path,
                                String user,
                                String group,
                                AzureDataLakeStorageClient client,
                                RequestOptions opts,
                                OperationResponse resp) {
        // at least one of owner or user must be set
        if (       (user == null  || user.equals(""))
                && (group == null || group.equals(""))
                ) {
            resp.successful = false;
            resp.message = "Both user and owner names cannot be blank";
            return;
        }

        QueryParams qp = new QueryParams();
        if (user!=null && !user.equals("")) {
            qp.add("owner", user);
        }
        if (group!=null && !group.equals("")) {
            qp.add("group", group);
        }

        HttpTransport.makeCall(client, Operation.SETOWNER, path, qp, null, 0, 0, opts, resp);
    }


    /**
     * Sets the permissions of the specified file ro directory. This sets the traditional unix read/write/execute
     * permissions for the file/directory. To set Acl's use the
     * {@link #setAcl(String, List, AzureDataLakeStorageClient, RequestOptions, OperationResponse) setAcl} call.
     *
     *
     * @param path the full path of the file or directory ro set permissions for
     * @param octalPermissions the permissions to set, in unix octal form. For example, '644'.
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void setPermission(String path,
                                     String octalPermissions,
                                     AzureDataLakeStorageClient client,
                                     RequestOptions opts,
                                     OperationResponse resp) {
        if (!isValidOctal(octalPermissions)) {
            resp.message = "Specified permissions are not valid Octal Permissions: " + octalPermissions;
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("permission", octalPermissions);

        HttpTransport.makeCall(client, Operation.SETPERMISSION, path, qp, null, 0, 0, opts, resp);
    }

    private static final Pattern octalPattern = Pattern.compile("[0-7][0-7][0-7]");
    private static boolean isValidOctal(String input) {
        return octalPattern.matcher(input).matches();
    }

    /**
     * checks whether the calling user has the required permissions for the file. the permissions to check
     * should be specified in the rwx parameter, as a unix permission string.
     *
     * @param path the full path of the file or directory to check
     * @param rwx the permission to check for, in rwx string form. The call returns true if the caller has
     *            all the requested permissions. For example, specifying {@code "r-x"} succeeds if the caller has
     *            read and execute permissions.
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void checkAccess(String path,
                                   String rwx,
                                   AzureDataLakeStorageClient client,
                                   RequestOptions opts,
                                   OperationResponse resp) {
        if (rwx == null || rwx.trim().equals("")) {
            resp.message = "null or empty access specification passed in to check access for";
            resp.successful = false;
            return;
        }

        if (!isValidRwx(rwx)) {
            resp.message = "invalid access specification passed in to check access for: " + rwx;
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("fsaction", rwx);

        HttpTransport.makeCall(client, Operation.CHECKACCESS, path, qp, null, 0, 0, opts, resp);
    }

    private static final Pattern rwxPattern = Pattern.compile("[r-][w-][x-]");
    private static boolean isValidRwx(String input) {
        input = input.trim().toLowerCase();
        return rwxPattern.matcher(input).matches();
    }

    /**
     * Modify the acl entries for a file or directory. This call merges the supplied list with
     * existing ACLs. If an entry with the same scope, type and user already exists, then the permissions
     * are replaced. If not, than an new ACL entry if added.
     *
     *
     * @param path the path of the file or directory whose ACLs should be modified
     * @param aclSpec aclspec string containing the entries to add or modify
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void modifyAclEntries(String path,
                                        String aclSpec,
                                        AzureDataLakeStorageClient client,
                                        RequestOptions opts,
                                        OperationResponse resp) {
        if (aclSpec == null || aclSpec.trim().equals("")) {
            resp.message = "null or empty AclSpec passed in to modifyAclEntries";
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("aclspec", aclSpec);

        HttpTransport.makeCall(client, Operation.MODIFYACLENTRIES, path, qp, null, 0, 0, opts, resp);
    }

    /**
     * Modify the acl entries for a file or directory. This call merges the supplied list with
     * existing ACLs. If an entry with the same scope, type and user already exists, then the permissions
     * are replaced. If not, than an new ACL entry if added.
     *
     *
     * @param path the path of the file or directory whose ACLs should be modified
     * @param aclSpec {@link List} of {@link AclEntry}s, containing the entries to add or modify
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void modifyAclEntries(String path,
                                        List<AclEntry> aclSpec,
                                        AzureDataLakeStorageClient client,
                                        RequestOptions opts,
                                        OperationResponse resp) {
        if (aclSpec == null || aclSpec.size() == 0) {
            resp.message = "null or empty AclSpec passed in to modifyAclEntries";
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("aclspec", AclEntry.aclListToString(aclSpec));

        HttpTransport.makeCall(client, Operation.MODIFYACLENTRIES, path, qp, null, 0, 0, opts, resp);
    }

    /**
     * Removes the specified ACL entries from a file or directory.
     *
     * @param path the fll path of the file or directory to remove ACLs from
     * @param aclSpec aclspec string containing entries to remove
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void removeAclEntries(String path,
                                        String aclSpec,
                                        AzureDataLakeStorageClient client,
                                        RequestOptions opts,
                                        OperationResponse resp) {
        if (aclSpec == null || aclSpec.trim().equals("")) {
            resp.message = "null or empty AclSpec passed in to removeAclEntries";
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("aclspec", aclSpec);

        HttpTransport.makeCall(client, Operation.REMOVEACLENTRIES, path, qp, null, 0, 0, opts, resp);
    }


    /**
     * Removes the specified ACL entries from a file or directory.
     *
     * @param path the fll path of the file or directory to remove ACLs from
     * @param aclSpec {@link List} of {@link AclEntry}s to remove
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void removeAclEntries(String path,
                                        List<AclEntry> aclSpec,
                                        AzureDataLakeStorageClient client,
                                        RequestOptions opts,
                                        OperationResponse resp) {
        if (aclSpec == null || aclSpec.size() == 0) {
            resp.message = "null or empty AclSpec passed in to removeAclEntries";
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("aclspec", AclEntry.aclListToString(aclSpec, true));

        HttpTransport.makeCall(client, Operation.REMOVEACLENTRIES, path, qp, null, 0, 0, opts, resp);
    }

    /**
     * removes all default acl entries from a directory. The access ACLs for the directory itself are
     * not modified.
     *
     * @param path the full path of the directory from which to remove default ACLs
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void removeDefaultAcl(String path,
                                        AzureDataLakeStorageClient client,
                                        RequestOptions opts,
                                        OperationResponse resp) {

        HttpTransport.makeCall(client, Operation.REMOVEDEFAULTACL, path, null, null, 0, 0, opts, resp);
    }

    /**
     * removes all acl entries from a file or directory.
     *
     * @param path the full path of the file or directory from which to remove ACLs
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void removeAcl(String path,
                                 AzureDataLakeStorageClient client,
                                 RequestOptions opts,
                                 OperationResponse resp) {

        HttpTransport.makeCall(client, Operation.REMOVEACL, path, null, null, 0, 0, opts, resp);
    }

    /**
     * Sets the ACLs for a file or directory. If the file or directory already has any ACLs
     * associated with it, then all the existing ACLs are removed before adding the specified
     * ACLs.
     *
     * @param path the full path to the file or directory to set ACLs for.
     * @param aclSpec posix aclspec string containing the ACLs to set
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void setAcl(String path,
                              String aclSpec,
                              AzureDataLakeStorageClient client,
                              RequestOptions opts,
                              OperationResponse resp) {
        if (aclSpec == null || aclSpec.trim().equals("")) {
            resp.message = "null or empty AclSpec passed in to setAcl";
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("aclspec", aclSpec);

        HttpTransport.makeCall(client, Operation.SETACL, path, qp, null, 0, 0, opts, resp);
    }

    /**
     * Sets the ACLs for a file or directory. If the file or directory already has any ACLs
     * associated with it, then all the existing ACLs are removed before adding the specified
     * ACLs.
     *
     * @param path the full path to the file or directory to set ACLs for.
     * @param aclSpec {@link List} of {@link AclEntry}s to set
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     */
    public static void setAcl(String path,
                              List<AclEntry> aclSpec,
                              AzureDataLakeStorageClient client,
                              RequestOptions opts,
                              OperationResponse resp) {
        if (aclSpec == null || aclSpec.size() == 0) {
            resp.message = "null or empty AclSpec passed in to setAcl";
            resp.successful = false;
            return;
        }

        QueryParams qp = new QueryParams();
        qp.add("aclspec", AclEntry.aclListToString(aclSpec));

        HttpTransport.makeCall(client, Operation.SETACL, path, qp, null, 0, 0, opts, resp);
    }

    /**
     * Gets the current ACLs and permissions associated with a file or directory. Also returns the
     * current owning user and group for the file or directory.
     *
     * @param path the full path of the file or directory to get ACLs and permissions for
     * @param client the {@link AzureDataLakeStorageClient}
     * @param opts options to change the behavior of the call
     * @param resp response from the call, and any error info generated by the call
     *
     * @return {@link AclStatus} object containing the ACLs, permissions and owners of the file or directory
     */
    public static AclStatus getAclStatus(String path,
                                         AzureDataLakeStorageClient client,
                                         RequestOptions opts,
                                         OperationResponse resp) {

        HttpTransport.makeCall(client, Operation.SETACL, path, null, null, 0, 0, opts, resp);

        if (resp.successful) {
            AclStatus status = new AclStatus();
            ArrayList<AclEntry> list = new ArrayList<AclEntry>();
            status.aclSpec = list;
            try {
                ObjectMapper mapper = new ObjectMapper();
                JsonNode rootNode = mapper.readTree(resp.responseStream);
                JsonNode aclStatusNode = rootNode.path("AclStatus");
                JsonNode array = aclStatusNode.path("entries");
                for (JsonNode aclEntryNode : array) {
                    String aclEntryString = aclEntryNode.asText();
                    AclEntry aclEntry = AclEntry.parseAclEntry(aclEntryString);
                    list.add(aclEntry);
                }
                status.group = aclStatusNode.path("group").asText();
                status.owner = aclStatusNode.path("owner").asText();
                status.octalPermissions = aclStatusNode.path("permission").asText();
                return status;
            } catch (IOException ex) {
                resp.successful = false;
                resp.message = "Unexpected error happened reading response stream or parsing JSon from getAclStatus";
                return null;
            }
        } else {
            return null;
        }
    }



    /**
     * creates an {@link ADLException} from {@link OperationResponse}.
     *
     * @param resp the {@link OperationResponse} to convert to exception
     * @param defaultMessage message to use if the inner exception does not have a text message.
     * @return the {@link ADLException}, or {@code null} if the {@code resp.successful} is {@code true}
     */
    public static ADLException getExceptionFromResp(OperationResponse resp, String defaultMessage) {
        String msg = (resp.message == null) ? defaultMessage : resp.message;
        ADLException ex = new ADLException(msg);
        copyResponseToADLException(resp, ex);
        return ex;
    }

    /**
     * copies values from {@link OperationResponse} to {@link ADLException}.
     * @param resp the {@link OperationResponse} to copy from
     * @param ex the {@link ADLException} to copy to
     *
     * Throws NullPointerException if either of the input parameters are null
     */
    private static void copyResponseToADLException(OperationResponse resp, ADLException ex) {
        if (resp == null || ex == null) throw new NullPointerException("input parameters cannot be null");

        ex.httpResponseCode = resp.httpResponseCode;
        ex.httpResponseMessage = resp.httpResponseMessage;
        ex.requestId = resp.requestId;

        ex.numRetries = resp.numRetries;
        ex.lastCallLatency = resp.lastCallLatency;
        ex.responseContentLength = resp.responseContentLength;

        ex.remoteExceptionName = resp.remoteExceptionName;
        ex.remoteExceptionMessage = resp.remoteExceptionMessage;
        ex.remoteExceptionJavaClassName = resp.remoteExceptionJavaClassName;

        if (    resp.ex == null &&
                ex.getCause() == null &&
                ex.remoteExceptionJavaClassName !=null &&
                !ex.remoteExceptionJavaClassName.equals("")) {
            ex.initCause(getRemoteException(ex.remoteExceptionJavaClassName, ex.remoteExceptionMessage));
        } else {
            ex.initCause(resp.ex);
        }
    }

    private static IOException getRemoteException(String className, String message) {
        try {
            Class clazz = Class.forName(className);
            if (!clazz.isInstance(IOException.class)) { return new IOException(message); }
            Constructor c = clazz.getConstructor(String.class);
            return (IOException) c.newInstance(message);
        } catch (Exception ex) {
            return new IOException(message);
        }
    }

}
